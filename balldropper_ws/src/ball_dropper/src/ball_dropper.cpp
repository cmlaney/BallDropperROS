/*
 * Author: Evan Beachly
 * Date: August 30, 2015
 * Description: Code for receiving joystick commands over serial
 *
 * CRC Table generated by code found here:
 * http://www.ross.net/crc/download/crc_v3.txt
 *
 */

#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "std_msgs/String.h"
#include "std_msgs/UInt8.h"
#include "rdt.hpp"

std::auto_ptr<Serial> serialPort;

uint16_t ackCrc = 0;

//Transmit any string recieved to the ball dropper
void consoleCallback(const std_msgs::String& msg)
{
    if ( msg.data.length() < 255 )
    {
        ackCrc = transmitStringPacket(msg.data.c_str(), serialPort.get());
    }
}

//Main
int main(int argc, char **argv)
{
    //Create a node
    ros::init(argc, argv, "ball_dropper_node");
    ros::NodeHandle n;

    serialPort.reset(new Serial("/dev/ttyUSB0", 9600));

    ros::Subscriber consoleSub = n.subscribe("ballDropperMsg", 10, consoleCallback);

    Packet* receivedPkt;

    //Run until interrupted
    while (ros::ok())
    {
        receivedPkt = checkForPacket(serialPort.get());
        if (receivedPkt != NULL)
        {
            if (receivedPkt->dataLength > 0 )
            {
                if (receivedPkt->data[receivedPkt->dataLength - 1] == '\0')
                {
                    printf("String Packet Received: %s\n", receivedPkt->data);
                }
                else
                {
                    printf("Data Packet Received\n");
                }
            }
            else
            {
                if (receivedPkt->crc16 == ackCrc)
                {
                    printf("Ack Received\n");
                }
                else
                {
                    printf("Unknown Ack Received\n");
                }

            }
        }
        ros::spinOnce();
        //serialPort->writeByte(0xEF);
    }


    return 0;
}

